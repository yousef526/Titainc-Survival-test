setwd("D:/ASU.studying material/4th year/2nd semster/Distrbuited computing/Assigmentas")
library(caTools)
library(party)
library(dplyr)
library(magrittr)
library(e1071)
library(caret)
First.preprocessing_trail <- function(dataFrame_used){
# reprocessing and reading csvs
#####################################
if(dataFrame_used == "train.csv")
{
# training csv reading
mycsv_train = read.csv("train.csv",stringsAsFactors = F)
# know the columns names and see summary about each column
colnames(mycsv_train)
summary(mycsv_train)
columns_with_na <- colnames(mycsv_train)[colSums(is.na(mycsv_train)) > 0]
columns_with_na
# the columns to keep
mycsv_train_keeps <- c("Sex","Age","SibSp","Parch","Survived")
mycsv_train = mycsv_train[mycsv_train_keeps]
# replace missing value in column "Age" as it is only column has null values
x = median(as.numeric(mycsv_train$Age),na.rm = T)
mycsv_train$Age <- ifelse(is.na(mycsv_train$Age), x, mycsv_train$Age)
#change the sex data type to numeric
mycsv_train$Sex <- ifelse(mycsv_train$Sex=="female",0 ,1)
#head of data
head(mycsv_train)
}
else{
# reading test csv and doing same reprocessing
mycsv_test = read.csv("test.csv",stringsAsFactors = F)
# know the columns names and see summary about each column in test csv
# and replace null values
colnames(mycsv_test)
summary(mycsv_test)
columns_with_na_test <- colnames(mycsv_test)[colSums(is.na(mycsv_test)) > 0]
columns_with_na_test
# the columns to keep
mycsv_test_keeps <- c("PassengerId","Sex","Age","SibSp","Parch")
mycsv_test = mycsv_test[mycsv_test_keeps]
# replace missing value in column "Age" as it is only column has null values
x = median(as.numeric(mycsv_test$Age),na.rm = T)
mycsv_test$Age <- ifelse(is.na(mycsv_test$Age), x, mycsv_test$Age)
#change the sex data type to numeric
mycsv_test$Sex <- ifelse(mycsv_test$Sex=="female",0 ,1)
head(mycsv_test)
}
}
Second.preprocessing_trail <- function(dataFrame_used){
# reprocessing and reading csvs
#####################################
if(dataFrame_used == "train.csv")
{
# training csv reading
mycsv_train = read.csv("train.csv",stringsAsFactors = F)
# know the columns names and see summary about each column
colnames(mycsv_train)
summary(mycsv_train)
columns_with_na <- colnames(mycsv_train)[colSums(is.na(mycsv_train)) > 0]
columns_with_na
# the columns to keep
mycsv_train_keeps <- c("Pclass","Sex","Age","SibSp","Parch","Fare","takeOff","Survived")
mycsv_train = mycsv_train[mycsv_train_keeps]
# replace missing value in column "Age" as it is only column has null values
x = mean(as.numeric(mycsv_train$Age),na.rm = T)
mycsv_train$Age <- ifelse(is.na(mycsv_train$Age), x, mycsv_train$Age)
#change the sex data type to numeric
mycsv_train$Sex <- ifelse(mycsv_train$Sex=="female",0 ,1)
mycsv_train$Fare <- as.numeric(mycsv_train$Fare)
mycsv_train$Fare <- (mycsv_train$Fare- min(mycsv_train$Fare,na.rm = T))/(max(mycsv_train$Fare,na.rm = T) - min(mycsv_train$Fare,na.rm = T))
mycsv_train$takeOff <- ifelse(mycsv_train$takeOff=="C",2,mycsv_train$takeOff)
mycsv_train$takeOff <- ifelse(mycsv_train$takeOff=="S",1,mycsv_train$takeOff)
mycsv_train$takeOff <- ifelse(mycsv_train$takeOff=="Q",3,mycsv_train$takeOff)
mycsv_train$takeOff <- as.numeric(mycsv_train$takeOff)
#head of data
head(mycsv_train)
return(mycsv_train)
}
else{
# reading test csv and doing same reprocessing
mycsv_test = read.csv("test.csv",stringsAsFactors = F)
# know the columns names and see summary about each column in test csv
# and replace null values
colnames(mycsv_test)
summary(mycsv_test)
columns_with_na_test <- colnames(mycsv_test)[colSums(is.na(mycsv_test)) > 0]
columns_with_na_test
# the columns to keep
mycsv_test_keeps <- c("PassengerId","Pclass","Sex","Age","SibSp","Parch","Fare","takeOff")
mycsv_test = mycsv_test[mycsv_test_keeps]
# replace missing value in column "Age" as it is only column has null values
x = mean(as.numeric(mycsv_test$Age),na.rm = T)
mycsv_test$Age <- ifelse(is.na(mycsv_test$Age), x, mycsv_test$Age)
#change the sex data type to numeric
mycsv_test$Sex <- ifelse(mycsv_test$Sex=="female",0 ,1)
mycsv_test$Fare <- as.numeric(mycsv_test$Fare)
mycsv_test$Fare <- (mycsv_test$Fare- min(mycsv_test$Fare,na.rm = T))/(max(mycsv_test$Fare,na.rm = T) - min(mycsv_test$Fare,na.rm = T))
mycsv_test$takeOff <- ifelse(mycsv_test$takeOff=="C",2,mycsv_test$takeOff)
mycsv_test$takeOff <- ifelse(mycsv_test$takeOff=="S",1,mycsv_test$takeOff)
mycsv_test$takeOff <- ifelse(mycsv_test$takeOff=="Q",3,mycsv_test$takeOff)
mycsv_test$takeOff <- as.numeric(mycsv_test$takeOff)
head(mycsv_test)
return(mycsv_test)
}
}
mycsv_train = First.preprocessing_trail("train.csv")
mycsv_train = Second.preprocessing_trail("train.csv")
mycsv_train = First.preprocessing_trail("train.csv")
mycsv_train = Second.preprocessing_trail("train.csv")
# training csv reading
mycsv_train = read.csv("train.csv",stringsAsFactors = F)
# training csv reading
mycsv_train = read.csv("train.csv",stringsAsFactors = F)
mycsv_train = First.preprocessing_trail("train.csv")
# training csv reading
mycsv_train = read.csv("train.csv",stringsAsFactors = F)
mycsv_train = Second.preprocessing_trail("train.csv")
mycsv_train = First.preprocessing_trail("train.csv")
mycsv_train = First.preprocessing_trail("train.csv")
mycsv_test = First.preprocessing_trail("test.csv")
# reading test csv and doing same reprocessing
mycsv_test = read.csv("test.csv",stringsAsFactors = F)
# training csv reading
mycsv_train = read.csv("train.csv",stringsAsFactors = F)
First.preprocessing_trail <- function(dataFrame_used){
# reprocessing and reading csvs
#####################################
if(dataFrame_used == "train.csv")
{
# training csv reading
mycsv_train = read.csv("train.csv",stringsAsFactors = F)
# know the columns names and see summary about each column
colnames(mycsv_train)
summary(mycsv_train)
columns_with_na <- colnames(mycsv_train)[colSums(is.na(mycsv_train)) > 0]
columns_with_na
# the columns to keep
mycsv_train_keeps <- c("Sex","Age","SibSp","Parch","Survived")
mycsv_train = mycsv_train[mycsv_train_keeps]
# replace missing value in column "Age" as it is only column has null values
x = median(as.numeric(mycsv_train$Age),na.rm = T)
mycsv_train$Age <- ifelse(is.na(mycsv_train$Age), x, mycsv_train$Age)
#change the sex data type to numeric
mycsv_train$Sex <- ifelse(mycsv_train$Sex=="female",0 ,1)
#head of data
head(mycsv_train)
return(mycsv_train)
}
else{
# reading test csv and doing same reprocessing
mycsv_test = read.csv("test.csv",stringsAsFactors = F)
# know the columns names and see summary about each column in test csv
# and replace null values
colnames(mycsv_test)
summary(mycsv_test)
columns_with_na_test <- colnames(mycsv_test)[colSums(is.na(mycsv_test)) > 0]
columns_with_na_test
# the columns to keep
mycsv_test_keeps <- c("PassengerId","Sex","Age","SibSp","Parch")
mycsv_test = mycsv_test[mycsv_test_keeps]
# replace missing value in column "Age" as it is only column has null values
x = median(as.numeric(mycsv_test$Age),na.rm = T)
mycsv_test$Age <- ifelse(is.na(mycsv_test$Age), x, mycsv_test$Age)
#change the sex data type to numeric
mycsv_test$Sex <- ifelse(mycsv_test$Sex=="female",0 ,1)
head(mycsv_test)
return(mycsv_test)
}
}
Second.preprocessing_trail <- function(dataFrame_used){
# reprocessing and reading csvs
#####################################
if(dataFrame_used == "train.csv")
{
# training csv reading
mycsv_train = read.csv("train.csv",stringsAsFactors = F)
# know the columns names and see summary about each column
colnames(mycsv_train)
summary(mycsv_train)
columns_with_na <- colnames(mycsv_train)[colSums(is.na(mycsv_train)) > 0]
columns_with_na
# the columns to keep
mycsv_train_keeps <- c("Pclass","Sex","Age","SibSp","Parch","Fare","takeOff","Survived")
mycsv_train = mycsv_train[mycsv_train_keeps]
# replace missing value in column "Age" as it is only column has null values
x = mean(as.numeric(mycsv_train$Age),na.rm = T)
mycsv_train$Age <- ifelse(is.na(mycsv_train$Age), x, mycsv_train$Age)
#change the sex data type to numeric
mycsv_train$Sex <- ifelse(mycsv_train$Sex=="female",0 ,1)
mycsv_train$Fare <- as.numeric(mycsv_train$Fare)
mycsv_train$Fare <- (mycsv_train$Fare- min(mycsv_train$Fare,na.rm = T))/(max(mycsv_train$Fare,na.rm = T) - min(mycsv_train$Fare,na.rm = T))
mycsv_train$takeOff <- ifelse(mycsv_train$takeOff=="C",2,mycsv_train$takeOff)
mycsv_train$takeOff <- ifelse(mycsv_train$takeOff=="S",1,mycsv_train$takeOff)
mycsv_train$takeOff <- ifelse(mycsv_train$takeOff=="Q",3,mycsv_train$takeOff)
mycsv_train$takeOff <- as.numeric(mycsv_train$takeOff)
#head of data
head(mycsv_train)
return(mycsv_train)
}
else{
# reading test csv and doing same reprocessing
mycsv_test = read.csv("test.csv",stringsAsFactors = F)
# know the columns names and see summary about each column in test csv
# and replace null values
colnames(mycsv_test)
summary(mycsv_test)
columns_with_na_test <- colnames(mycsv_test)[colSums(is.na(mycsv_test)) > 0]
columns_with_na_test
# the columns to keep
mycsv_test_keeps <- c("PassengerId","Pclass","Sex","Age","SibSp","Parch","Fare","takeOff")
mycsv_test = mycsv_test[mycsv_test_keeps]
# replace missing value in column "Age" as it is only column has null values
x = mean(as.numeric(mycsv_test$Age),na.rm = T)
mycsv_test$Age <- ifelse(is.na(mycsv_test$Age), x, mycsv_test$Age)
#change the sex data type to numeric
mycsv_test$Sex <- ifelse(mycsv_test$Sex=="female",0 ,1)
mycsv_test$Fare <- as.numeric(mycsv_test$Fare)
mycsv_test$Fare <- (mycsv_test$Fare- min(mycsv_test$Fare,na.rm = T))/(max(mycsv_test$Fare,na.rm = T) - min(mycsv_test$Fare,na.rm = T))
mycsv_test$takeOff <- ifelse(mycsv_test$takeOff=="C",2,mycsv_test$takeOff)
mycsv_test$takeOff <- ifelse(mycsv_test$takeOff=="S",1,mycsv_test$takeOff)
mycsv_test$takeOff <- ifelse(mycsv_test$takeOff=="Q",3,mycsv_test$takeOff)
mycsv_test$takeOff <- as.numeric(mycsv_test$takeOff)
head(mycsv_test)
return(mycsv_test)
}
}
mycsv_train = First.preprocessing_trail("train.csv")
mycsv_test = First.preprocessing_trail("test.csv")
library(caTools)
library(party)
library(dplyr)
library(magrittr)
library(e1071)
library(caret)
mycsv_train = First.preprocessing_trail("train.csv")
mycsv_test = First.preprocessing_trail("test.csv")
#mycsv_train = Second.preprocessing_trail("train.csv")
#mycsv_test = Second.preprocessing_trail("test.csv")
# Set seed for reproducibility
set.seed(123)
# used models
#################################
# using logistic regression
mylogit <- glm(formula = Survived~ .,data = mycsv_train)
# using naive bayes
mynaive <- naiveBayes(formula = Survived~ .,data = mycsv_train)
# using SVM
mySVM <- svm(formula = Survived~ . ,data = mycsv_train,
kernel = 'radial')
# using decision trees
myTree <- ctree(formula = Survived ~ . ,data = mycsv_train)
# predictions for each model
################################
#using the logistic regression
prediction = predict(mylogit,mycsv_test)
prediction = ifelse(prediction>=0.5,1,0)
# using naive bayes
prediction = predict(mynaive,mycsv_test)
# using SVM
prediction = predict(mySVM,mycsv_test)
# using Decision Trees
prediction = predict(myTree,mycsv_test)
prediction = ifelse(prediction>=0.5,1,0)
############################
# predication part and writing to csv
########################
mycsv_test["Survived"] <- prediction
head(mycsv_test)
keeps = c("PassengerId","Survived")
res <- mycsv_test[keeps]
write.csv(res,"Res_titanic.csv",row.names = F)
First.preprocessing_trail <- function(dataFrame_used){
# reprocessing and reading csvs
#####################################
if(dataFrame_used == "train.csv")
{
# training csv reading
mycsv_train = read.csv("train.csv",stringsAsFactors = F)
# know the columns names and see summary about each column
colnames(mycsv_train)
summary(mycsv_train)
columns_with_na <- colnames(mycsv_train)[colSums(is.na(mycsv_train)) > 0]
columns_with_na
# the columns to keep
mycsv_train_keeps <- c("Sex","Age","SibSp","Parch","Survived")
mycsv_train = mycsv_train[mycsv_train_keeps]
# replace missing value in column "Age" as it is only column has null values
x = median(as.numeric(mycsv_train$Age),na.rm = T)
mycsv_train$Age <- ifelse(is.na(mycsv_train$Age), x, mycsv_train$Age)
#change the sex data type to numeric
mycsv_train$Sex <- ifelse(mycsv_train$Sex=="female",0 ,1)
#head of data
head(mycsv_train)
return(mycsv_train)
}
else{
# reading test csv and doing same reprocessing
mycsv_test = read.csv("test.csv",stringsAsFactors = F)
# know the columns names and see summary about each column in test csv
# and replace null values
colnames(mycsv_test)
summary(mycsv_test)
columns_with_na_test <- colnames(mycsv_test)[colSums(is.na(mycsv_test)) > 0]
columns_with_na_test
# the columns to keep
mycsv_test_keeps <- c("PassengerId","Sex","Age","SibSp","Parch")
mycsv_test = mycsv_test[mycsv_test_keeps]
# replace missing value in column "Age" as it is only column has null values
x = median(as.numeric(mycsv_test$Age),na.rm = T)
mycsv_test$Age <- ifelse(is.na(mycsv_test$Age), x, mycsv_test$Age)
#change the sex data type to numeric
mycsv_test$Sex <- ifelse(mycsv_test$Sex=="female",0 ,1)
head(mycsv_test)
return(mycsv_test)
}
}
Second.preprocessing_trail <- function(dataFrame_used){
# reprocessing and reading csvs
#####################################
if(dataFrame_used == "train.csv")
{
# training csv reading
mycsv_train = read.csv("train.csv",stringsAsFactors = F)
# know the columns names and see summary about each column
colnames(mycsv_train)
summary(mycsv_train)
columns_with_na <- colnames(mycsv_train)[colSums(is.na(mycsv_train)) > 0]
columns_with_na
# the columns to keep
mycsv_train_keeps <- c("Pclass","Sex","Age","SibSp","Parch","Fare","takeOff","Survived")
mycsv_train = mycsv_train[mycsv_train_keeps]
# replace missing value in column "Age" as it is only column has null values
x = mean(as.numeric(mycsv_train$Age),na.rm = T)
mycsv_train$Age <- ifelse(is.na(mycsv_train$Age), x, mycsv_train$Age)
#change the sex data type to numeric
mycsv_train$Sex <- ifelse(mycsv_train$Sex=="female",0 ,1)
mycsv_train$Fare <- as.numeric(mycsv_train$Fare)
mycsv_train$Fare <- (mycsv_train$Fare- min(mycsv_train$Fare,na.rm = T))/(max(mycsv_train$Fare,na.rm = T) - min(mycsv_train$Fare,na.rm = T))
mycsv_train$takeOff <- ifelse(mycsv_train$takeOff=="C",2,mycsv_train$takeOff)
mycsv_train$takeOff <- ifelse(mycsv_train$takeOff=="S",1,mycsv_train$takeOff)
mycsv_train$takeOff <- ifelse(mycsv_train$takeOff=="Q",3,mycsv_train$takeOff)
mycsv_train$takeOff <- as.numeric(mycsv_train$takeOff)
#head of data
head(mycsv_train)
return(mycsv_train)
}
else{
# reading test csv and doing same reprocessing
mycsv_test = read.csv("test.csv",stringsAsFactors = F)
# know the columns names and see summary about each column in test csv
# and replace null values
colnames(mycsv_test)
summary(mycsv_test)
columns_with_na_test <- colnames(mycsv_test)[colSums(is.na(mycsv_test)) > 0]
columns_with_na_test
# the columns to keep
mycsv_test_keeps <- c("PassengerId","Pclass","Sex","Age","SibSp","Parch","Fare","takeOff")
mycsv_test = mycsv_test[mycsv_test_keeps]
# replace missing value in column "Age" as it is only column has null values
x = mean(as.numeric(mycsv_test$Age),na.rm = T)
mycsv_test$Age <- ifelse(is.na(mycsv_test$Age), x, mycsv_test$Age)
#change the sex data type to numeric
mycsv_test$Sex <- ifelse(mycsv_test$Sex=="female",0 ,1)
mycsv_test$Fare <- as.numeric(mycsv_test$Fare)
mycsv_test$Fare <- (mycsv_test$Fare- min(mycsv_test$Fare,na.rm = T))/(max(mycsv_test$Fare,na.rm = T) - min(mycsv_test$Fare,na.rm = T))
mycsv_test$takeOff <- ifelse(mycsv_test$takeOff=="C",2,mycsv_test$takeOff)
mycsv_test$takeOff <- ifelse(mycsv_test$takeOff=="S",1,mycsv_test$takeOff)
mycsv_test$takeOff <- ifelse(mycsv_test$takeOff=="Q",3,mycsv_test$takeOff)
mycsv_test$takeOff <- as.numeric(mycsv_test$takeOff)
head(mycsv_test)
return(mycsv_test)
}
}
